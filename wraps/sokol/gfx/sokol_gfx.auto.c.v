// NOTE this file is auto-generated by chew
module gfx

import shy.wraps.sokol.c

pub const version = 1

pub const used_import = c.used_import

//
// sokol_gfx.h
//

/*
TODO Non-numerical: #define SOKOL_GFX_IMPL
*/

/*
TODO Function: #define SOKOL_GFX_INCLUDED (1)
*/

/*
TODO Non-numerical: #define SOKOL_GFX_API_DECL SOKOL_API_DECL
*/

/*
TODO Function: #define SOKOL_GFX_API_DECL __declspec(dllexport)
*/

/*
TODO Function: #define SOKOL_GFX_API_DECL __declspec(dllimport)
*/

/*
TODO Non-numerical: #define SOKOL_GFX_API_DECL extern
*/

[typedef]
struct C.sg_buffer {
	id u32 // NOTE Added from chew config
}

pub type Buffer = C.sg_buffer

[typedef]
struct C.sg_image {
	id u32 // NOTE Added from chew config
}

pub type Image = C.sg_image

[typedef]
struct C.sg_shader {
	id u32 // NOTE Added from chew config
}

pub type Shader = C.sg_shader

[typedef]
struct C.sg_pipeline {
	id u32 // NOTE Added from chew config
}

pub type Pipeline = C.sg_pipeline

[typedef]
struct C.sg_pass {
	id u32 // NOTE Added from chew config
}

pub type Pass = C.sg_pass

[typedef]
struct C.sg_context {
	id u32 // NOTE Added from chew config
}

pub type Context = C.sg_context

[typedef]
struct C.sg_range {
pub mut:
	ptr  voidptr
	size usize
}

pub type Range = C.sg_range

/*
TODO Function: #define SG_RANGE(x) sg_range{ &x, sizeof(x) }
*/

/*
TODO Function: #define SG_RANGE_REF(x) sg_range{ &x, sizeof(x) }
*/

/*
TODO Function: #define SG_RANGE(x) (sg_range){ &x, sizeof(x) }
*/

/*
TODO Function: #define SG_RANGE_REF(x) &(sg_range){ &x, sizeof(x) }
*/

[typedef]
struct C.sg_color {
	r f32 // NOTE Added from chew config
	g f32 // NOTE Added from chew config
	b f32 // NOTE Added from chew config
	a f32 // NOTE Added from chew config
}

pub type Color = C.sg_color

// Backend is C.sg_backend
pub enum Backend {
	glcore33 = C.SG_BACKEND_GLCORE33
	gles2 = C.SG_BACKEND_GLES2
	gles3 = C.SG_BACKEND_GLES3
	d3d11 = C.SG_BACKEND_D3D11
	metal_ios = C.SG_BACKEND_METAL_IOS
	metal_macos = C.SG_BACKEND_METAL_MACOS
	metal_simulator = C.SG_BACKEND_METAL_SIMULATOR
	wgpu = C.SG_BACKEND_WGPU
	dummy = C.SG_BACKEND_DUMMY
}

// PixelFormat is C.sg_pixel_format
pub enum PixelFormat {
	default = C._SG_PIXELFORMAT_DEFAULT // value 0 reserved for default-init
	@none = C.SG_PIXELFORMAT_NONE
	r8 = C.SG_PIXELFORMAT_R8
	r8sn = C.SG_PIXELFORMAT_R8SN
	r8ui = C.SG_PIXELFORMAT_R8UI
	r8si = C.SG_PIXELFORMAT_R8SI
	r16 = C.SG_PIXELFORMAT_R16
	r16sn = C.SG_PIXELFORMAT_R16SN
	r16ui = C.SG_PIXELFORMAT_R16UI
	r16si = C.SG_PIXELFORMAT_R16SI
	r16f = C.SG_PIXELFORMAT_R16F
	rg8 = C.SG_PIXELFORMAT_RG8
	rg8sn = C.SG_PIXELFORMAT_RG8SN
	rg8ui = C.SG_PIXELFORMAT_RG8UI
	rg8si = C.SG_PIXELFORMAT_RG8SI
	r32ui = C.SG_PIXELFORMAT_R32UI
	r32si = C.SG_PIXELFORMAT_R32SI
	r32f = C.SG_PIXELFORMAT_R32F
	rg16 = C.SG_PIXELFORMAT_RG16
	rg16sn = C.SG_PIXELFORMAT_RG16SN
	rg16ui = C.SG_PIXELFORMAT_RG16UI
	rg16si = C.SG_PIXELFORMAT_RG16SI
	rg16f = C.SG_PIXELFORMAT_RG16F
	rgba8 = C.SG_PIXELFORMAT_RGBA8
	rgba8sn = C.SG_PIXELFORMAT_RGBA8SN
	rgba8ui = C.SG_PIXELFORMAT_RGBA8UI
	rgba8si = C.SG_PIXELFORMAT_RGBA8SI
	bgra8 = C.SG_PIXELFORMAT_BGRA8
	rgb10a2 = C.SG_PIXELFORMAT_RGB10A2
	rg11b10f = C.SG_PIXELFORMAT_RG11B10F
	rg32ui = C.SG_PIXELFORMAT_RG32UI
	rg32si = C.SG_PIXELFORMAT_RG32SI
	rg32f = C.SG_PIXELFORMAT_RG32F
	rgba16 = C.SG_PIXELFORMAT_RGBA16
	rgba16sn = C.SG_PIXELFORMAT_RGBA16SN
	rgba16ui = C.SG_PIXELFORMAT_RGBA16UI
	rgba16si = C.SG_PIXELFORMAT_RGBA16SI
	rgba16f = C.SG_PIXELFORMAT_RGBA16F
	rgba32ui = C.SG_PIXELFORMAT_RGBA32UI
	rgba32si = C.SG_PIXELFORMAT_RGBA32SI
	rgba32f = C.SG_PIXELFORMAT_RGBA32F
	depth = C.SG_PIXELFORMAT_DEPTH
	depth_stencil = C.SG_PIXELFORMAT_DEPTH_STENCIL
	bc1_rgba = C.SG_PIXELFORMAT_BC1_RGBA
	bc2_rgba = C.SG_PIXELFORMAT_BC2_RGBA
	bc3_rgba = C.SG_PIXELFORMAT_BC3_RGBA
	bc4_r = C.SG_PIXELFORMAT_BC4_R
	bc4_rsn = C.SG_PIXELFORMAT_BC4_RSN
	bc5_rg = C.SG_PIXELFORMAT_BC5_RG
	bc5_rgsn = C.SG_PIXELFORMAT_BC5_RGSN
	bc6h_rgbf = C.SG_PIXELFORMAT_BC6H_RGBF
	bc6h_rgbuf = C.SG_PIXELFORMAT_BC6H_RGBUF
	bc7_rgba = C.SG_PIXELFORMAT_BC7_RGBA
	pvrtc_rgb_2bpp = C.SG_PIXELFORMAT_PVRTC_RGB_2BPP
	pvrtc_rgb_4bpp = C.SG_PIXELFORMAT_PVRTC_RGB_4BPP
	pvrtc_rgba_2bpp = C.SG_PIXELFORMAT_PVRTC_RGBA_2BPP
	pvrtc_rgba_4bpp = C.SG_PIXELFORMAT_PVRTC_RGBA_4BPP
	etc2_rgb8 = C.SG_PIXELFORMAT_ETC2_RGB8
	etc2_rgb8a1 = C.SG_PIXELFORMAT_ETC2_RGB8A1
	etc2_rgba8 = C.SG_PIXELFORMAT_ETC2_RGBA8
	etc2_rg11 = C.SG_PIXELFORMAT_ETC2_RG11
	etc2_rg11sn = C.SG_PIXELFORMAT_ETC2_RG11SN
	num = C._SG_PIXELFORMAT_NUM
	force_u32 = C._SG_PIXELFORMAT_FORCE_U32 // 0x7FFFFFFF,
}

[typedef]
struct C.sg_pixelformat_info {
pub mut:
	sample bool
}

pub type PixelformatInfo = C.sg_pixelformat_info

[typedef]
struct C.sg_features {
pub mut:
	instancing bool
}

pub type Features = C.sg_features

[typedef]
struct C.sg_limits {
pub mut:
	max_image_size_2d int
}

pub type Limits = C.sg_limits

// ResourceState is C.sg_resource_state
pub enum ResourceState {
	initial = C.SG_RESOURCESTATE_INITIAL
	alloc = C.SG_RESOURCESTATE_ALLOC
	valid = C.SG_RESOURCESTATE_VALID
	failed = C.SG_RESOURCESTATE_FAILED
	invalid = C.SG_RESOURCESTATE_INVALID
	force_u32 = C._SG_RESOURCESTATE_FORCE_U32 // 0x7FFFFFFF,
}

// Usage is C.sg_usage
pub enum Usage {
	default = C._SG_USAGE_DEFAULT // value 0 reserved for default-init
	immutable = C.SG_USAGE_IMMUTABLE
	dynamic = C.SG_USAGE_DYNAMIC
	stream = C.SG_USAGE_STREAM
	num = C._SG_USAGE_NUM
	force_u32 = C._SG_USAGE_FORCE_U32 // 0x7FFFFFFF,
}

// BufferType is C.sg_buffer_type
pub enum BufferType {
	default = C._SG_BUFFERTYPE_DEFAULT // value 0 reserved for default-init
	vertexbuffer = C.SG_BUFFERTYPE_VERTEXBUFFER
	indexbuffer = C.SG_BUFFERTYPE_INDEXBUFFER
	num = C._SG_BUFFERTYPE_NUM
	force_u32 = C._SG_BUFFERTYPE_FORCE_U32 // 0x7FFFFFFF,
}

// IndexType is C.sg_index_type
pub enum IndexType {
	default = C._SG_INDEXTYPE_DEFAULT // value 0 reserved for default-init
	@none = C.SG_INDEXTYPE_NONE
	uint16 = C.SG_INDEXTYPE_UINT16
	uint32 = C.SG_INDEXTYPE_UINT32
	num = C._SG_INDEXTYPE_NUM
	force_u32 = C._SG_INDEXTYPE_FORCE_U32 // 0x7FFFFFFF,
}

// ImageType is C.sg_image_type
pub enum ImageType {
	default = C._SG_IMAGETYPE_DEFAULT // value 0 reserved for default-init
	_2d = C.SG_IMAGETYPE_2D
	cube = C.SG_IMAGETYPE_CUBE
	_3d = C.SG_IMAGETYPE_3D
	array = C.SG_IMAGETYPE_ARRAY
	num = C._SG_IMAGETYPE_NUM
	force_u32 = C._SG_IMAGETYPE_FORCE_U32 // 0x7FFFFFFF,
}

// SamplerType is C.sg_sampler_type
pub enum SamplerType {
	default = C._SG_SAMPLERTYPE_DEFAULT // value 0 reserved for default-init
	float = C.SG_SAMPLERTYPE_FLOAT
	sint = C.SG_SAMPLERTYPE_SINT
	uint = C.SG_SAMPLERTYPE_UINT
}

// CubeFace is C.sg_cube_face
pub enum CubeFace {
	pos_x = C.SG_CUBEFACE_POS_X
	neg_x = C.SG_CUBEFACE_NEG_X
	pos_y = C.SG_CUBEFACE_POS_Y
	neg_y = C.SG_CUBEFACE_NEG_Y
	pos_z = C.SG_CUBEFACE_POS_Z
	neg_z = C.SG_CUBEFACE_NEG_Z
	num = C.SG_CUBEFACE_NUM
	force_u32 = C._SG_CUBEFACE_FORCE_U32 // 0x7FFFFFFF,
}

// ShaderStage is C.sg_shader_stage
pub enum ShaderStage {
	vs = C.SG_SHADERSTAGE_VS
	fs = C.SG_SHADERSTAGE_FS
	force_u32 = C._SG_SHADERSTAGE_FORCE_U32 // 0x7FFFFFFF,
}

// PrimitiveType is C.sg_primitive_type
pub enum PrimitiveType {
	default = C._SG_PRIMITIVETYPE_DEFAULT // value 0 reserved for default-init
	points = C.SG_PRIMITIVETYPE_POINTS
	lines = C.SG_PRIMITIVETYPE_LINES
	line_strip = C.SG_PRIMITIVETYPE_LINE_STRIP
	triangles = C.SG_PRIMITIVETYPE_TRIANGLES
	triangle_strip = C.SG_PRIMITIVETYPE_TRIANGLE_STRIP
	num = C._SG_PRIMITIVETYPE_NUM
	force_u32 = C._SG_PRIMITIVETYPE_FORCE_U32 // 0x7FFFFFFF,
}

// Filter is C.sg_filter
pub enum Filter {
	default = C._SG_FILTER_DEFAULT // value 0 reserved for default-init
	nearest = C.SG_FILTER_NEAREST
	linear = C.SG_FILTER_LINEAR
	nearest_mipmap_nearest = C.SG_FILTER_NEAREST_MIPMAP_NEAREST
	nearest_mipmap_linear = C.SG_FILTER_NEAREST_MIPMAP_LINEAR
	linear_mipmap_nearest = C.SG_FILTER_LINEAR_MIPMAP_NEAREST
	linear_mipmap_linear = C.SG_FILTER_LINEAR_MIPMAP_LINEAR
	num = C._SG_FILTER_NUM
	force_u32 = C._SG_FILTER_FORCE_U32 // 0x7FFFFFFF,
}

// Wrap is C.sg_wrap
pub enum Wrap {
	default = C._SG_WRAP_DEFAULT // value 0 reserved for default-init
	repeat = C.SG_WRAP_REPEAT
	clamp_to_edge = C.SG_WRAP_CLAMP_TO_EDGE
	clamp_to_border = C.SG_WRAP_CLAMP_TO_BORDER
	mirrored_repeat = C.SG_WRAP_MIRRORED_REPEAT
	num = C._SG_WRAP_NUM
	force_u32 = C._SG_WRAP_FORCE_U32 // 0x7FFFFFFF,
}

// BorderColor is C.sg_border_color
pub enum BorderColor {
	default = C._SG_BORDERCOLOR_DEFAULT // value 0 reserved for default-init
	transparent_black = C.SG_BORDERCOLOR_TRANSPARENT_BLACK
	opaque_black = C.SG_BORDERCOLOR_OPAQUE_BLACK
	opaque_white = C.SG_BORDERCOLOR_OPAQUE_WHITE
	num = C._SG_BORDERCOLOR_NUM
	force_u32 = C._SG_BORDERCOLOR_FORCE_U32 // 0x7FFFFFFF,
}

// VertexFormat is C.sg_vertex_format
pub enum VertexFormat {
	invalid = C.SG_VERTEXFORMAT_INVALID
	float = C.SG_VERTEXFORMAT_FLOAT
	float2 = C.SG_VERTEXFORMAT_FLOAT2
	float3 = C.SG_VERTEXFORMAT_FLOAT3
	float4 = C.SG_VERTEXFORMAT_FLOAT4
	byte4 = C.SG_VERTEXFORMAT_BYTE4
	byte4n = C.SG_VERTEXFORMAT_BYTE4N
	ubyte4 = C.SG_VERTEXFORMAT_UBYTE4
	ubyte4n = C.SG_VERTEXFORMAT_UBYTE4N
	short2 = C.SG_VERTEXFORMAT_SHORT2
	short2n = C.SG_VERTEXFORMAT_SHORT2N
	ushort2n = C.SG_VERTEXFORMAT_USHORT2N
	short4 = C.SG_VERTEXFORMAT_SHORT4
	short4n = C.SG_VERTEXFORMAT_SHORT4N
	ushort4n = C.SG_VERTEXFORMAT_USHORT4N
	uint10_n2 = C.SG_VERTEXFORMAT_UINT10_N2
	num = C._SG_VERTEXFORMAT_NUM
	force_u32 = C._SG_VERTEXFORMAT_FORCE_U32 // 0x7FFFFFFF,
}

// VertexStep is C.sg_vertex_step
pub enum VertexStep {
	default = C._SG_VERTEXSTEP_DEFAULT // value 0 reserved for default-init
	per_vertex = C.SG_VERTEXSTEP_PER_VERTEX
	per_instance = C.SG_VERTEXSTEP_PER_INSTANCE
	num = C._SG_VERTEXSTEP_NUM
	force_u32 = C._SG_VERTEXSTEP_FORCE_U32 // 0x7FFFFFFF,
}

// UniformType is C.sg_uniform_type
pub enum UniformType {
	invalid = C.SG_UNIFORMTYPE_INVALID
	float = C.SG_UNIFORMTYPE_FLOAT
	float2 = C.SG_UNIFORMTYPE_FLOAT2
	float3 = C.SG_UNIFORMTYPE_FLOAT3
	float4 = C.SG_UNIFORMTYPE_FLOAT4
	int = C.SG_UNIFORMTYPE_INT
	int2 = C.SG_UNIFORMTYPE_INT2
	int3 = C.SG_UNIFORMTYPE_INT3
	int4 = C.SG_UNIFORMTYPE_INT4
	mat4 = C.SG_UNIFORMTYPE_MAT4
	num = C._SG_UNIFORMTYPE_NUM
	force_u32 = C._SG_UNIFORMTYPE_FORCE_U32 // 0x7FFFFFFF,
}

// UniformLayout is C.sg_uniform_layout
pub enum UniformLayout {
	default = C._SG_UNIFORMLAYOUT_DEFAULT // value 0 reserved for default-init
	native = C.SG_UNIFORMLAYOUT_NATIVE // default: layout depends on currently active backend
	std140 = C.SG_UNIFORMLAYOUT_STD140 // std140: memory layout according to std140
	num = C._SG_UNIFORMLAYOUT_NUM
	force_u32 = C._SG_UNIFORMLAYOUT_FORCE_U32 // 0x7FFFFFFF,
}

// CullMode is C.sg_cull_mode
pub enum CullMode {
	default = C._SG_CULLMODE_DEFAULT // value 0 reserved for default-init
	@none = C.SG_CULLMODE_NONE
	front = C.SG_CULLMODE_FRONT
	back = C.SG_CULLMODE_BACK
	num = C._SG_CULLMODE_NUM
	force_u32 = C._SG_CULLMODE_FORCE_U32 // 0x7FFFFFFF,
}

// FaceWinding is C.sg_face_winding
pub enum FaceWinding {
	default = C._SG_FACEWINDING_DEFAULT // value 0 reserved for default-init
	ccw = C.SG_FACEWINDING_CCW
	cw = C.SG_FACEWINDING_CW
	num = C._SG_FACEWINDING_NUM
	force_u32 = C._SG_FACEWINDING_FORCE_U32 // 0x7FFFFFFF,
}

// CompareFunc is C.sg_compare_func
pub enum CompareFunc {
	default = C._SG_COMPAREFUNC_DEFAULT // value 0 reserved for default-init
	never = C.SG_COMPAREFUNC_NEVER
	less = C.SG_COMPAREFUNC_LESS
	equal = C.SG_COMPAREFUNC_EQUAL
	less_equal = C.SG_COMPAREFUNC_LESS_EQUAL
	greater = C.SG_COMPAREFUNC_GREATER
	not_equal = C.SG_COMPAREFUNC_NOT_EQUAL
	greater_equal = C.SG_COMPAREFUNC_GREATER_EQUAL
	always = C.SG_COMPAREFUNC_ALWAYS
	num = C._SG_COMPAREFUNC_NUM
	force_u32 = C._SG_COMPAREFUNC_FORCE_U32 // 0x7FFFFFFF,
}

// StencilOp is C.sg_stencil_op
pub enum StencilOp {
	default = C._SG_STENCILOP_DEFAULT // value 0 reserved for default-init
	keep = C.SG_STENCILOP_KEEP
	zero = C.SG_STENCILOP_ZERO
	replace = C.SG_STENCILOP_REPLACE
	incr_clamp = C.SG_STENCILOP_INCR_CLAMP
	decr_clamp = C.SG_STENCILOP_DECR_CLAMP
	invert = C.SG_STENCILOP_INVERT
	incr_wrap = C.SG_STENCILOP_INCR_WRAP
	decr_wrap = C.SG_STENCILOP_DECR_WRAP
	num = C._SG_STENCILOP_NUM
	force_u32 = C._SG_STENCILOP_FORCE_U32 // 0x7FFFFFFF,
}

// BlendFactor is C.sg_blend_factor
pub enum BlendFactor {
	default = C._SG_BLENDFACTOR_DEFAULT // value 0 reserved for default-init
	zero = C.SG_BLENDFACTOR_ZERO
	one = C.SG_BLENDFACTOR_ONE
	src_color = C.SG_BLENDFACTOR_SRC_COLOR
	one_minus_src_color = C.SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR
	src_alpha = C.SG_BLENDFACTOR_SRC_ALPHA
	one_minus_src_alpha = C.SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA
	dst_color = C.SG_BLENDFACTOR_DST_COLOR
	one_minus_dst_color = C.SG_BLENDFACTOR_ONE_MINUS_DST_COLOR
	dst_alpha = C.SG_BLENDFACTOR_DST_ALPHA
	one_minus_dst_alpha = C.SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA
	src_alpha_saturated = C.SG_BLENDFACTOR_SRC_ALPHA_SATURATED
	blend_color = C.SG_BLENDFACTOR_BLEND_COLOR
	one_minus_blend_color = C.SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR
	blend_alpha = C.SG_BLENDFACTOR_BLEND_ALPHA
	one_minus_blend_alpha = C.SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA
	num = C._SG_BLENDFACTOR_NUM
	force_u32 = C._SG_BLENDFACTOR_FORCE_U32 // 0x7FFFFFFF,
}

// BlendOp is C.sg_blend_op
pub enum BlendOp {
	default = C._SG_BLENDOP_DEFAULT // value 0 reserved for default-init
	add = C.SG_BLENDOP_ADD
	subtract = C.SG_BLENDOP_SUBTRACT
	reverse_subtract = C.SG_BLENDOP_REVERSE_SUBTRACT
	num = C._SG_BLENDOP_NUM
	force_u32 = C._SG_BLENDOP_FORCE_U32 // 0x7FFFFFFF,
}

// ColorMask is C.sg_color_mask
pub enum ColorMask {
	default = C._SG_COLORMASK_DEFAULT // 0, value 0 reserved for default-init
	@none = C.SG_COLORMASK_NONE // 0x10, special value for 'all channels disabled
	r = C.SG_COLORMASK_R // 0x1,
	g = C.SG_COLORMASK_G // 0x2,
	rg = C.SG_COLORMASK_RG // 0x3,
	b = C.SG_COLORMASK_B // 0x4,
	rb = C.SG_COLORMASK_RB // 0x5,
	gb = C.SG_COLORMASK_GB // 0x6,
	rgb = C.SG_COLORMASK_RGB // 0x7,
	a = C.SG_COLORMASK_A // 0x8,
	ra = C.SG_COLORMASK_RA // 0x9,
	ga = C.SG_COLORMASK_GA // 0xA,
	rga = C.SG_COLORMASK_RGA // 0xB,
	ba = C.SG_COLORMASK_BA // 0xC,
	rba = C.SG_COLORMASK_RBA // 0xD,
	gba = C.SG_COLORMASK_GBA // 0xE,
	rgba = C.SG_COLORMASK_RGBA // 0xF,
	force_u32 = C._SG_COLORMASK_FORCE_U32 // 0x7FFFFFFF,
}

// Action is C.sg_action
pub enum Action {
	default = C._SG_ACTION_DEFAULT
	clear = C.SG_ACTION_CLEAR
	load = C.SG_ACTION_LOAD
	dontcare = C.SG_ACTION_DONTCARE
	num = C._SG_ACTION_NUM
	force_u32 = C._SG_ACTION_FORCE_U32 // 0x7FFFFFFF,
}

[typedef]
struct C.sg_color_attachment_action {
pub mut:
	action Action
	value  Color
}

pub type ColorAttachmentAction = C.sg_color_attachment_action

[typedef]
struct C.sg_depth_attachment_action {
pub mut:
	action Action
	value  f32
}

pub type DepthAttachmentAction = C.sg_depth_attachment_action

[typedef]
struct C.sg_stencil_attachment_action {
pub mut:
	action Action
	value  u8
}

pub type StencilAttachmentAction = C.sg_stencil_attachment_action

[typedef]
struct C.sg_pass_action {
pub mut:
	_start_canary u32
	// TODO 	colors [SG_MAX_COLOR_ATTACHMENTS]ColorAttachmentAction
	colors      [4]ColorAttachmentAction
	depth       DepthAttachmentAction
	stencil     StencilAttachmentAction
	_end_canary u32
}

pub type PassAction = C.sg_pass_action

[typedef]
struct C.sg_bindings {
pub mut:
	_start_canary         u32
	vertex_buffers        [8]Buffer
	vertex_buffer_offsets [8]int
	index_buffer          Buffer
	index_buffer_offset   int
	// TODO 	vs_images [SG_MAX_SHADERSTAGE_IMAGES]Image
	// TODO 	fs_images [SG_MAX_SHADERSTAGE_IMAGES]Image
	_end_canary u32
}

pub type Bindings = C.sg_bindings

[typedef]
struct C.sg_buffer_desc {
pub mut:
	_start_canary u32
	size          usize
	@type         BufferType
	usage         Usage
	data          Range
	label         &char = unsafe { nil } // GL specific
	// TODO 	gl_buffers [SG_NUM_INFLIGHT_FRAMES]u32 // Metal specific
	// TODO 	mtl_buffers [SG_NUM_INFLIGHT_FRAMES]voidptr // D3D11 specific
	d3d11_buffer voidptr // WebGPU specific
	wgpu_buffer  voidptr
	_end_canary  u32
}

pub type BufferDesc = C.sg_buffer_desc

pub const sg_cubeface_num = 6

pub const sg_max_mipmaps = 16

[typedef]
struct C.sg_image_data {
pub mut:
	// TODO 	subimage [SG_CUBEFACE_NUM][SG_MAX_MIPMAPS]Range
	subimage [sg_cubeface_num][sg_max_mipmaps]Range
}

pub type ImageData = C.sg_image_data

[typedef]
struct C.sg_image_desc {
pub mut:
	_start_canary  u32
	@type          ImageType
	render_target  bool
	width          int
	height         int
	num_slices     int
	num_mipmaps    int
	usage          Usage
	pixel_format   PixelFormat
	sample_count   int
	min_filter     Filter
	mag_filter     Filter
	wrap_u         Wrap
	wrap_v         Wrap
	wrap_w         Wrap
	border_color   BorderColor
	max_anisotropy u32
	min_lod        f32
	max_lod        f32
	data           ImageData
	label          &char = unsafe { nil } // GL specific
	// TODO 	gl_textures [SG_NUM_INFLIGHT_FRAMES]u32
	gl_texture_target u32 // Metal specific
	// TODO 	mtl_textures [SG_NUM_INFLIGHT_FRAMES]voidptr // D3D11 specific
	d3d11_texture              voidptr
	d3d11_shader_resource_view voidptr // WebGPU specific
	wgpu_texture               voidptr
	_end_canary                u32
}

pub type ImageDesc = C.sg_image_desc

[typedef]
struct C.sg_shader_attr_desc {
pub mut:
	name &char = unsafe { nil }
}

pub type ShaderAttrDesc = C.sg_shader_attr_desc

[typedef]
struct C.sg_shader_uniform_desc {
pub mut:
	name        &char = unsafe { nil }
	@type       UniformType
	array_count int
}

pub type ShaderUniformDesc = C.sg_shader_uniform_desc

[typedef]
struct C.sg_shader_uniform_block_desc {
pub mut:
	size   usize
	layout UniformLayout
	// TODO 	uniforms [SG_MAX_UB_MEMBERS]ShaderUniformDesc
}

pub type ShaderUniformBlockDesc = C.sg_shader_uniform_block_desc

[typedef]
struct C.sg_shader_image_desc {
pub mut:
	name         &char = unsafe { nil }
	image_type   ImageType
	sampler_type SamplerType
}

pub type ShaderImageDesc = C.sg_shader_image_desc

[typedef]
struct C.sg_shader_stage_desc {
pub mut:
	source       &char = unsafe { nil }
	bytecode     Range
	entry        &char = unsafe { nil }
	d3d11_target &char = unsafe { nil }
	// TODO 	uniform_blocks [SG_MAX_SHADERSTAGE_UBS]ShaderUniformBlockDesc
	// TODO 	images [SG_MAX_SHADERSTAGE_IMAGES]ShaderImageDesc
}

pub type ShaderStageDesc = C.sg_shader_stage_desc

[typedef]
struct C.sg_shader_desc {
pub mut:
	_start_canary u32
	// TODO 	attrs [16]ShaderAttrDesc
	vs          ShaderStageDesc
	fs          ShaderStageDesc
	label       &char = unsafe { nil }
	_end_canary u32
}

pub type ShaderDesc = C.sg_shader_desc

[typedef]
struct C.sg_buffer_layout_desc {
pub mut:
	stride    int
	step_func VertexStep
	step_rate int
	// TODO #if defined(SOKOL_ZIG_BINDINGS) uint32_t __pad[2]
}

pub type BufferLayoutDesc = C.sg_buffer_layout_desc

[typedef]
struct C.sg_vertex_attr_desc {
pub mut:
	buffer_index int
	offset       int
	format       VertexFormat
	// TODO #if defined(SOKOL_ZIG_BINDINGS) uint32_t __pad[2]
}

pub type VertexAttrDesc = C.sg_vertex_attr_desc

[typedef]
struct C.sg_layout_desc {
pub mut:
	buffers [8]BufferLayoutDesc
	attrs   [16]VertexAttrDesc
}

pub type LayoutDesc = C.sg_layout_desc

[typedef]
struct C.sg_stencil_face_state {
pub mut:
	compare       CompareFunc
	fail_op       StencilOp
	depth_fail_op StencilOp
	pass_op       StencilOp
}

pub type StencilFaceState = C.sg_stencil_face_state

[typedef]
struct C.sg_stencil_state {
pub mut:
	enabled    bool
	front      StencilFaceState
	back       StencilFaceState
	read_mask  u8
	write_mask u8
	ref        u8
}

pub type StencilState = C.sg_stencil_state

[typedef]
struct C.sg_depth_state {
pub mut:
	pixel_format     PixelFormat
	compare          CompareFunc
	write_enabled    bool
	bias             f32
	bias_slope_scale f32
	bias_clamp       f32
}

pub type DepthState = C.sg_depth_state

[typedef]
struct C.sg_blend_state {
pub mut:
	enabled          bool
	src_factor_rgb   BlendFactor
	dst_factor_rgb   BlendFactor
	op_rgb           BlendOp
	src_factor_alpha BlendFactor
	dst_factor_alpha BlendFactor
	op_alpha         BlendOp
}

pub type BlendState = C.sg_blend_state

[typedef]
struct C.sg_color_state {
pub mut:
	pixel_format PixelFormat
	write_mask   ColorMask
	blend        BlendState
}

pub type ColorState = C.sg_color_state

[typedef]
struct C.sg_pipeline_desc {
pub mut:
	_start_canary u32
	shader        Shader
	layout        LayoutDesc
	depth         DepthState
	stencil       StencilState
	color_count   int
	// TODO 	colors [SG_MAX_COLOR_ATTACHMENTS]ColorState
	colors                    [4]ColorState
	primitive_type            PrimitiveType
	index_type                IndexType
	cull_mode                 CullMode
	face_winding              FaceWinding
	sample_count              int
	blend_color               Color
	alpha_to_coverage_enabled bool
	label                     &char = unsafe { nil }
	_end_canary               u32
}

pub type PipelineDesc = C.sg_pipeline_desc

[typedef]
struct C.sg_pass_attachment_desc {
pub mut:
	image     Image
	mip_level int
	slice     int // cube texture: face
	// TODO 	texture: C.array // layer
}

pub type PassAttachmentDesc = C.sg_pass_attachment_desc

[typedef]
struct C.sg_pass_desc {
pub mut:
	_start_canary u32
	// TODO 	color_attachments [SG_MAX_COLOR_ATTACHMENTS]PassAttachmentDesc
	color_attachments        [4]PassAttachmentDesc
	depth_stencil_attachment PassAttachmentDesc
	label                    &char = unsafe { nil }
	_end_canary              u32
}

pub type PassDesc = C.sg_pass_desc

[typedef]
struct C.sg_trace_hooks {
pub mut:
	user_data                   voidptr
	reset_state_cache           fn (user_data voidptr) // user_data)
	make_buffer                 fn (const_desc &BufferDesc, result Buffer, user_data voidptr)     // sg_buffer_desc*
	make_image                  fn (const_desc &ImageDesc, result Image, user_data voidptr)       // sg_image_desc*
	make_shader                 fn (const_desc &ShaderDesc, result Shader, user_data voidptr)     // sg_shader_desc*
	make_pipeline               fn (const_desc &PipelineDesc, result Pipeline, user_data voidptr) // sg_pipeline_desc*
	make_pass                   fn (const_desc &PassDesc, result Pass, user_data voidptr) // sg_pass_desc*
	destroy_buffer              fn (buf Buffer, user_data voidptr)   // buf,
	destroy_image               fn (img Image, user_data voidptr)    // img,
	destroy_shader              fn (shd Shader, user_data voidptr)   // shd,
	destroy_pipeline            fn (pip Pipeline, user_data voidptr) // pip,
	destroy_pass                fn (pass Pass, user_data voidptr)    // pass,
	update_buffer               fn (buf Buffer, const_data &Range, user_data voidptr)    // buf,
	update_image                fn (img Image, const_data &ImageData, user_data voidptr) // img,
	append_buffer               fn (buf Buffer, const_data &Range, result int, user_data voidptr) // buf,
	begin_default_pass          fn (const_pass_action &PassAction, width int, height int, user_data voidptr) // sg_pass_action*
	begin_pass                  fn (pass Pass, const_pass_action &PassAction, user_data voidptr) // pass,
	apply_viewport              fn (x int, y int, width int, height int, origin_top_left bool, user_data voidptr) // x,
	apply_scissor_rect          fn (x int, y int, width int, height int, origin_top_left bool, user_data voidptr) // x,
	apply_pipeline              fn (pip Pipeline, user_data voidptr) // pip,
	apply_bindings              fn (const_bindings &Bindings, user_data voidptr) // sg_bindings*
	apply_uniforms              fn (stage ShaderStage, ub_index int, const_data &Range, user_data voidptr)    // stage,
	draw                        fn (base_element int, num_elements int, num_instances int, user_data voidptr) // base_element,
	end_pass                    fn (user_data voidptr) // user_data)
	commit                      fn (user_data voidptr) // user_data)
	alloc_buffer                fn (result Buffer, user_data voidptr)   // result,
	alloc_image                 fn (result Image, user_data voidptr)    // result,
	alloc_shader                fn (result Shader, user_data voidptr)   // result,
	alloc_pipeline              fn (result Pipeline, user_data voidptr) // result,
	alloc_pass                  fn (result Pass, user_data voidptr)     // result,
	dealloc_buffer              fn (buf_id Buffer, user_data voidptr)   // buf_id,
	dealloc_image               fn (img_id Image, user_data voidptr)    // img_id,
	dealloc_shader              fn (shd_id Shader, user_data voidptr)   // shd_id,
	dealloc_pipeline            fn (pip_id Pipeline, user_data voidptr) // pip_id,
	dealloc_pass                fn (pass_id Pass, user_data voidptr)    // pass_id,
	init_buffer                 fn (buf_id Buffer, const_desc &BufferDesc, user_data voidptr)     // buf_id,
	init_image                  fn (img_id Image, const_desc &ImageDesc, user_data voidptr)       // img_id,
	init_shader                 fn (shd_id Shader, const_desc &ShaderDesc, user_data voidptr)     // shd_id,
	init_pipeline               fn (pip_id Pipeline, const_desc &PipelineDesc, user_data voidptr) // pip_id,
	init_pass                   fn (pass_id Pass, const_desc &PassDesc, user_data voidptr)        // pass_id,
	uninit_buffer               fn (buf_id Buffer, user_data voidptr)    // buf_id,
	uninit_image                fn (img_id Image, user_data voidptr)     // img_id,
	uninit_shader               fn (shd_id Shader, user_data voidptr)    // shd_id,
	uninit_pipeline             fn (pip_id Pipeline, user_data voidptr)  // pip_id,
	uninit_pass                 fn (pass_id Pass, user_data voidptr)     // pass_id,
	fail_buffer                 fn (buf_id Buffer, user_data voidptr)    // buf_id,
	fail_image                  fn (img_id Image, user_data voidptr)     // img_id,
	fail_shader                 fn (shd_id Shader, user_data voidptr)    // shd_id,
	fail_pipeline               fn (pip_id Pipeline, user_data voidptr)  // pip_id,
	fail_pass                   fn (pass_id Pass, user_data voidptr)     // pass_id,
	push_debug_group            fn (const_name &char, user_data voidptr) // char*
	pop_debug_group             fn (user_data voidptr) // user_data)
	err_buffer_pool_exhausted   fn (user_data voidptr) // user_data)
	err_image_pool_exhausted    fn (user_data voidptr) // user_data)
	err_shader_pool_exhausted   fn (user_data voidptr) // user_data)
	err_pipeline_pool_exhausted fn (user_data voidptr) // user_data)
	err_pass_pool_exhausted     fn (user_data voidptr) // user_data)
	err_context_mismatch        fn (user_data voidptr) // user_data)
	err_pass_invalid            fn (user_data voidptr) // user_data)
	err_draw_invalid            fn (user_data voidptr) // user_data)
	err_bindings_invalid        fn (user_data voidptr) // user_data)
}

pub type TraceHooks = C.sg_trace_hooks

[typedef]
struct C.sg_slot_info {
pub mut:
	state  ResourceState // the current state of this resource slot
	res_id u32 // type-neutral resource if (e.g. sg_buffer.id)
	ctx_id u32 // the context this resource belongs to
}

pub type SlotInfo = C.sg_slot_info

[typedef]
struct C.sg_buffer_info {
pub mut:
	slot               SlotInfo // resource pool slot info
	update_frame_index u32      // frame index of last sg_update_buffer()
	append_frame_index u32      // frame index of last sg_append_buffer()
	append_pos         int      // current position in buffer for sg_append_buffer()
	append_overflow    bool     // is buffer in overflow state (due to sg_append_buffer)
	num_slots          int      // number of renaming-slots for dynamically updated buffers
	active_slot        int      // currently active write-slot for dynamically updated buffers
}

pub type BufferInfo = C.sg_buffer_info

[typedef]
struct C.sg_image_info {
pub mut:
	slot            SlotInfo // resource pool slot info
	upd_frame_index u32      // frame index of last sg_update_image()
	num_slots       int      // number of renaming-slots for dynamically updated images
	active_slot     int      // currently active write-slot for dynamically updated images
	width           int      // image width
	height          int      // image height
}

pub type ImageInfo = C.sg_image_info

[typedef]
struct C.sg_shader_info {
pub mut:
	slot SlotInfo // resoure pool slot info
}

pub type ShaderInfo = C.sg_shader_info

[typedef]
struct C.sg_pipeline_info {
pub mut:
	slot SlotInfo // resource pool slot info
}

pub type PipelineInfo = C.sg_pipeline_info

[typedef]
struct C.sg_pass_info {
pub mut:
	slot SlotInfo // resource pool slot info
}

pub type PassInfo = C.sg_pass_info

[typedef]
struct C.sg_gl_context_desc {
pub mut:
	force_gles2 bool
}

pub type GlContextDesc = C.sg_gl_context_desc

[typedef]
struct C.sg_metal_context_desc {
pub mut:
	device                            voidptr
	renderpass_descriptor_cb          fn () voidptr
	renderpass_descriptor_userdata_cb fn () voidptr
	drawable_cb                       fn () voidptr
	drawable_userdata_cb              fn () voidptr
	user_data                         voidptr
}

pub type MetalContextDesc = C.sg_metal_context_desc

[typedef]
struct C.sg_d3d11_context_desc {
pub mut:
	device                         voidptr
	device_context                 voidptr
	render_target_view_cb          fn () voidptr
	render_target_view_userdata_cb fn () voidptr
	depth_stencil_view_cb          fn () voidptr
	depth_stencil_view_userdata_cb fn () voidptr
	user_data                      voidptr
}

pub type D3d11ContextDesc = C.sg_d3d11_context_desc

[typedef]
struct C.sg_wgpu_context_desc {
pub mut:
	device                         voidptr       // WGPUDevice
	render_view_cb                 fn () voidptr // returns WGPUTextureView
	render_view_userdata_cb        fn () voidptr
	resolve_view_cb                fn () voidptr // returns WGPUTextureView
	resolve_view_userdata_cb       fn () voidptr
	depth_stencil_view_cb          fn () voidptr // returns WGPUTextureView, must be WGPUTextureFormat_Depth24Plus8
	depth_stencil_view_userdata_cb fn () voidptr
	user_data                      voidptr
}

pub type WgpuContextDesc = C.sg_wgpu_context_desc

[typedef]
struct C.sg_context_desc {
pub mut:
	color_format PixelFormat
	depth_format PixelFormat
	sample_count int
	gl           GlContextDesc
	metal        MetalContextDesc
	d3d11        D3d11ContextDesc
	wgpu         WgpuContextDesc
}

pub type ContextDesc = C.sg_context_desc

[typedef]
struct C.sg_allocator {
pub mut:
	alloc     fn (size usize, user_data voidptr) voidptr // size,
	free      fn (ptr voidptr, user_data voidptr)        // ptr,
	user_data voidptr
}

pub type Allocator = C.sg_allocator

[typedef]
struct C.sg_desc {
pub mut:
	_start_canary       u32
	buffer_pool_size    int
	image_pool_size     int
	shader_pool_size    int
	pipeline_pool_size  int
	pass_pool_size      int
	context_pool_size   int
	uniform_buffer_size int
	staging_buffer_size int
	sampler_cache_size  int
	allocator           Allocator
	context             ContextDesc
	_end_canary         u32
}

pub type Desc = C.sg_desc

// C: `SOKOL_GFX_API_DECL void sg_setup(const sg_desc* desc)`
fn C.sg_setup(const_desc &Desc)

// setup setups and misc functions
pub fn setup(const_desc &Desc) {
	C.sg_setup(const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_shutdown(void)`
fn C.sg_shutdown()

// shutdown is currently undocumented
pub fn shutdown() {
	C.sg_shutdown()
}

// C: `SOKOL_GFX_API_DECL bool sg_isvalid(void)`
fn C.sg_isvalid() bool

// isvalid is currently undocumented
pub fn isvalid() bool {
	return C.sg_isvalid()
}

// C: `SOKOL_GFX_API_DECL void sg_reset_state_cache(void)`
fn C.sg_reset_state_cache()

// reset_state_cache is currently undocumented
pub fn reset_state_cache() {
	C.sg_reset_state_cache()
}

// C: `SOKOL_GFX_API_DECL sg_trace_hooks sg_install_trace_hooks(const sg_trace_hooks* trace_hooks)`
fn C.sg_install_trace_hooks(const_trace_hooks &TraceHooks) TraceHooks

// install_trace_hooks is currently undocumented
pub fn install_trace_hooks(const_trace_hooks &TraceHooks) TraceHooks {
	return C.sg_install_trace_hooks(const_trace_hooks)
}

// C: `SOKOL_GFX_API_DECL void sg_push_debug_group(const char* name)`
fn C.sg_push_debug_group(const_name &char)

// push_debug_group is currently undocumented
pub fn push_debug_group(const_name &char) {
	C.sg_push_debug_group(const_name)
}

// C: `SOKOL_GFX_API_DECL void sg_pop_debug_group(void)`
fn C.sg_pop_debug_group()

// pop_debug_group is currently undocumented
pub fn pop_debug_group() {
	C.sg_pop_debug_group()
}

// C: `SOKOL_GFX_API_DECL sg_buffer sg_make_buffer(const sg_buffer_desc* desc)`
fn C.sg_make_buffer(const_desc &BufferDesc) Buffer

// make_buffer resources creation, destruction and updating
pub fn make_buffer(const_desc &BufferDesc) Buffer {
	return C.sg_make_buffer(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_image sg_make_image(const sg_image_desc* desc)`
fn C.sg_make_image(const_desc &ImageDesc) Image

// make_image is currently undocumented
pub fn make_image(const_desc &ImageDesc) Image {
	return C.sg_make_image(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_shader sg_make_shader(const sg_shader_desc* desc)`
fn C.sg_make_shader(const_desc &ShaderDesc) Shader

// make_shader is currently undocumented
pub fn make_shader(const_desc &ShaderDesc) Shader {
	return C.sg_make_shader(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_pipeline sg_make_pipeline(const sg_pipeline_desc* desc)`
fn C.sg_make_pipeline(const_desc &PipelineDesc) Pipeline

// make_pipeline is currently undocumented
pub fn make_pipeline(const_desc &PipelineDesc) Pipeline {
	return C.sg_make_pipeline(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_pass sg_make_pass(const sg_pass_desc* desc)`
fn C.sg_make_pass(const_desc &PassDesc) Pass

// make_pass is currently undocumented
pub fn make_pass(const_desc &PassDesc) Pass {
	return C.sg_make_pass(const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_buffer(sg_buffer buf)`
fn C.sg_destroy_buffer(buf Buffer)

// destroy_buffer is currently undocumented
pub fn destroy_buffer(buf Buffer) {
	C.sg_destroy_buffer(buf)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_image(sg_image img)`
fn C.sg_destroy_image(img Image)

// destroy_image is currently undocumented
pub fn destroy_image(img Image) {
	C.sg_destroy_image(img)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_shader(sg_shader shd)`
fn C.sg_destroy_shader(shd Shader)

// destroy_shader is currently undocumented
pub fn destroy_shader(shd Shader) {
	C.sg_destroy_shader(shd)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_pipeline(sg_pipeline pip)`
fn C.sg_destroy_pipeline(pip Pipeline)

// destroy_pipeline is currently undocumented
pub fn destroy_pipeline(pip Pipeline) {
	C.sg_destroy_pipeline(pip)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_pass(sg_pass pass)`
fn C.sg_destroy_pass(pass Pass)

// destroy_pass is currently undocumented
pub fn destroy_pass(pass Pass) {
	C.sg_destroy_pass(pass)
}

// C: `SOKOL_GFX_API_DECL void sg_update_buffer(sg_buffer buf, const sg_range* data)`
fn C.sg_update_buffer(buf Buffer, const_data &Range)

// update_buffer is currently undocumented
pub fn update_buffer(buf Buffer, const_data &Range) {
	C.sg_update_buffer(buf, const_data)
}

// C: `SOKOL_GFX_API_DECL void sg_update_image(sg_image img, const sg_image_data* data)`
fn C.sg_update_image(img Image, const_data &ImageData)

// update_image is currently undocumented
pub fn update_image(img Image, const_data &ImageData) {
	C.sg_update_image(img, const_data)
}

// C: `SOKOL_GFX_API_DECL int sg_append_buffer(sg_buffer buf, const sg_range* data)`
fn C.sg_append_buffer(buf Buffer, const_data &Range) int

// append_buffer is currently undocumented
pub fn append_buffer(buf Buffer, const_data &Range) int {
	return C.sg_append_buffer(buf, const_data)
}

// C: `SOKOL_GFX_API_DECL bool sg_query_buffer_overflow(sg_buffer buf)`
fn C.sg_query_buffer_overflow(buf Buffer) bool

// query_buffer_overflow is currently undocumented
pub fn query_buffer_overflow(buf Buffer) bool {
	return C.sg_query_buffer_overflow(buf)
}

// C: `SOKOL_GFX_API_DECL bool sg_query_buffer_will_overflow(sg_buffer buf, size_t size)`
fn C.sg_query_buffer_will_overflow(buf Buffer, size usize) bool

// query_buffer_will_overflow is currently undocumented
pub fn query_buffer_will_overflow(buf Buffer, size usize) bool {
	return C.sg_query_buffer_will_overflow(buf, size)
}

// C: `SOKOL_GFX_API_DECL void sg_begin_default_pass(const sg_pass_action* pass_action, int width, int height)`
fn C.sg_begin_default_pass(const_pass_action &PassAction, width int, height int)

// begin_default_pass renderings functions
pub fn begin_default_pass(const_pass_action &PassAction, width int, height int) {
	C.sg_begin_default_pass(const_pass_action, width, height)
}

// C: `SOKOL_GFX_API_DECL void sg_begin_default_passf(const sg_pass_action* pass_action, float width, float height)`
fn C.sg_begin_default_passf(const_pass_action &PassAction, width f32, height f32)

// begin_default_passf is currently undocumented
pub fn begin_default_passf(const_pass_action &PassAction, width f32, height f32) {
	C.sg_begin_default_passf(const_pass_action, width, height)
}

// C: `SOKOL_GFX_API_DECL void sg_begin_pass(sg_pass pass, const sg_pass_action* pass_action)`
fn C.sg_begin_pass(pass Pass, const_pass_action &PassAction)

// begin_pass is currently undocumented
pub fn begin_pass(pass Pass, const_pass_action &PassAction) {
	C.sg_begin_pass(pass, const_pass_action)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_viewport(int x, int y, int width, int height, bool origin_top_left)`
fn C.sg_apply_viewport(x int, y int, width int, height int, origin_top_left bool)

// apply_viewport is currently undocumented
pub fn apply_viewport(x int, y int, width int, height int, origin_top_left bool) {
	C.sg_apply_viewport(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_viewportf(float x, float y, float width, float height, bool origin_top_left)`
fn C.sg_apply_viewportf(x f32, y f32, width f32, height f32, origin_top_left bool)

// apply_viewportf is currently undocumented
pub fn apply_viewportf(x f32, y f32, width f32, height f32, origin_top_left bool) {
	C.sg_apply_viewportf(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_scissor_rect(int x, int y, int width, int height, bool origin_top_left)`
fn C.sg_apply_scissor_rect(x int, y int, width int, height int, origin_top_left bool)

// apply_scissor_rect is currently undocumented
pub fn apply_scissor_rect(x int, y int, width int, height int, origin_top_left bool) {
	C.sg_apply_scissor_rect(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_scissor_rectf(float x, float y, float width, float height, bool origin_top_left)`
fn C.sg_apply_scissor_rectf(x f32, y f32, width f32, height f32, origin_top_left bool)

// apply_scissor_rectf is currently undocumented
pub fn apply_scissor_rectf(x f32, y f32, width f32, height f32, origin_top_left bool) {
	C.sg_apply_scissor_rectf(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_pipeline(sg_pipeline pip)`
fn C.sg_apply_pipeline(pip Pipeline)

// apply_pipeline is currently undocumented
pub fn apply_pipeline(pip Pipeline) {
	C.sg_apply_pipeline(pip)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_bindings(const sg_bindings* bindings)`
fn C.sg_apply_bindings(const_bindings &Bindings)

// apply_bindings is currently undocumented
pub fn apply_bindings(const_bindings &Bindings) {
	C.sg_apply_bindings(const_bindings)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_uniforms(sg_shader_stage stage, int ub_index, const sg_range* data)`
fn C.sg_apply_uniforms(stage ShaderStage, ub_index int, const_data &Range)

// apply_uniforms is currently undocumented
pub fn apply_uniforms(stage ShaderStage, ub_index int, const_data &Range) {
	C.sg_apply_uniforms(stage, ub_index, const_data)
}

// C: `SOKOL_GFX_API_DECL void sg_draw(int base_element, int num_elements, int num_instances)`
fn C.sg_draw(base_element int, num_elements int, num_instances int)

// draw is currently undocumented
pub fn draw(base_element int, num_elements int, num_instances int) {
	C.sg_draw(base_element, num_elements, num_instances)
}

// C: `SOKOL_GFX_API_DECL void sg_end_pass(void)`
fn C.sg_end_pass()

// end_pass is currently undocumented
pub fn end_pass() {
	C.sg_end_pass()
}

// C: `SOKOL_GFX_API_DECL void sg_commit(void)`
fn C.sg_commit()

// commit is currently undocumented
pub fn commit() {
	C.sg_commit()
}

// C: `SOKOL_GFX_API_DECL sg_desc sg_query_desc(void)`
fn C.sg_query_desc() Desc

// query_desc gettings information
pub fn query_desc() Desc {
	return C.sg_query_desc()
}

// C: `SOKOL_GFX_API_DECL sg_backend sg_query_backend(void)`
fn C.sg_query_backend() Backend

// query_backend is currently undocumented
pub fn query_backend() Backend {
	return C.sg_query_backend()
}

// C: `SOKOL_GFX_API_DECL sg_features sg_query_features(void)`
fn C.sg_query_features() Features

// query_features is currently undocumented
pub fn query_features() Features {
	return C.sg_query_features()
}

// C: `SOKOL_GFX_API_DECL sg_limits sg_query_limits(void)`
fn C.sg_query_limits() Limits

// query_limits is currently undocumented
pub fn query_limits() Limits {
	return C.sg_query_limits()
}

// C: `SOKOL_GFX_API_DECL sg_pixelformat_info sg_query_pixelformat(sg_pixel_format fmt)`
fn C.sg_query_pixelformat(fmt PixelFormat) PixelformatInfo

// query_pixelformat is currently undocumented
pub fn query_pixelformat(fmt PixelFormat) PixelformatInfo {
	return C.sg_query_pixelformat(fmt)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_buffer_state(sg_buffer buf)`
fn C.sg_query_buffer_state(buf Buffer) ResourceState

// query_buffer_state gets current state of a resource (INITIAL, ALLOC, VALID, FAILED, INVALID)
pub fn query_buffer_state(buf Buffer) ResourceState {
	return C.sg_query_buffer_state(buf)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_image_state(sg_image img)`
fn C.sg_query_image_state(img Image) ResourceState

// query_image_state is currently undocumented
pub fn query_image_state(img Image) ResourceState {
	return C.sg_query_image_state(img)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_shader_state(sg_shader shd)`
fn C.sg_query_shader_state(shd Shader) ResourceState

// query_shader_state is currently undocumented
pub fn query_shader_state(shd Shader) ResourceState {
	return C.sg_query_shader_state(shd)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_pipeline_state(sg_pipeline pip)`
fn C.sg_query_pipeline_state(pip Pipeline) ResourceState

// query_pipeline_state is currently undocumented
pub fn query_pipeline_state(pip Pipeline) ResourceState {
	return C.sg_query_pipeline_state(pip)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_pass_state(sg_pass pass)`
fn C.sg_query_pass_state(pass Pass) ResourceState

// query_pass_state is currently undocumented
pub fn query_pass_state(pass Pass) ResourceState {
	return C.sg_query_pass_state(pass)
}

// C: `SOKOL_GFX_API_DECL sg_buffer_info sg_query_buffer_info(sg_buffer buf)`
fn C.sg_query_buffer_info(buf Buffer) BufferInfo

// query_buffer_info gets runtime information about a resource
pub fn query_buffer_info(buf Buffer) BufferInfo {
	return C.sg_query_buffer_info(buf)
}

// C: `SOKOL_GFX_API_DECL sg_image_info sg_query_image_info(sg_image img)`
fn C.sg_query_image_info(img Image) ImageInfo

// query_image_info is currently undocumented
pub fn query_image_info(img Image) ImageInfo {
	return C.sg_query_image_info(img)
}

// C: `SOKOL_GFX_API_DECL sg_shader_info sg_query_shader_info(sg_shader shd)`
fn C.sg_query_shader_info(shd Shader) ShaderInfo

// query_shader_info is currently undocumented
pub fn query_shader_info(shd Shader) ShaderInfo {
	return C.sg_query_shader_info(shd)
}

// C: `SOKOL_GFX_API_DECL sg_pipeline_info sg_query_pipeline_info(sg_pipeline pip)`
fn C.sg_query_pipeline_info(pip Pipeline) PipelineInfo

// query_pipeline_info is currently undocumented
pub fn query_pipeline_info(pip Pipeline) PipelineInfo {
	return C.sg_query_pipeline_info(pip)
}

// C: `SOKOL_GFX_API_DECL sg_pass_info sg_query_pass_info(sg_pass pass)`
fn C.sg_query_pass_info(pass Pass) PassInfo

// query_pass_info is currently undocumented
pub fn query_pass_info(pass Pass) PassInfo {
	return C.sg_query_pass_info(pass)
}

// C: `SOKOL_GFX_API_DECL sg_buffer_desc sg_query_buffer_defaults(const sg_buffer_desc* desc)`
fn C.sg_query_buffer_defaults(const_desc &BufferDesc) BufferDesc

// query_buffer_defaults gets resource creation desc struct with their default values replaced
pub fn query_buffer_defaults(const_desc &BufferDesc) BufferDesc {
	return C.sg_query_buffer_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_image_desc sg_query_image_defaults(const sg_image_desc* desc)`
fn C.sg_query_image_defaults(const_desc &ImageDesc) ImageDesc

// query_image_defaults is currently undocumented
pub fn query_image_defaults(const_desc &ImageDesc) ImageDesc {
	return C.sg_query_image_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_shader_desc sg_query_shader_defaults(const sg_shader_desc* desc)`
fn C.sg_query_shader_defaults(const_desc &ShaderDesc) ShaderDesc

// query_shader_defaults is currently undocumented
pub fn query_shader_defaults(const_desc &ShaderDesc) ShaderDesc {
	return C.sg_query_shader_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_pipeline_desc sg_query_pipeline_defaults(const sg_pipeline_desc* desc)`
fn C.sg_query_pipeline_defaults(const_desc &PipelineDesc) PipelineDesc

// query_pipeline_defaults is currently undocumented
pub fn query_pipeline_defaults(const_desc &PipelineDesc) PipelineDesc {
	return C.sg_query_pipeline_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_pass_desc sg_query_pass_defaults(const sg_pass_desc* desc)`
fn C.sg_query_pass_defaults(const_desc &PassDesc) PassDesc

// query_pass_defaults is currently undocumented
pub fn query_pass_defaults(const_desc &PassDesc) PassDesc {
	return C.sg_query_pass_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_buffer sg_alloc_buffer(void)`
fn C.sg_alloc_buffer() Buffer

// alloc_buffer separates resource allocation and initialization (for async setup)
pub fn alloc_buffer() Buffer {
	return C.sg_alloc_buffer()
}

// C: `SOKOL_GFX_API_DECL sg_image sg_alloc_image(void)`
fn C.sg_alloc_image() Image

// alloc_image is currently undocumented
pub fn alloc_image() Image {
	return C.sg_alloc_image()
}

// C: `SOKOL_GFX_API_DECL sg_shader sg_alloc_shader(void)`
fn C.sg_alloc_shader() Shader

// alloc_shader is currently undocumented
pub fn alloc_shader() Shader {
	return C.sg_alloc_shader()
}

// C: `SOKOL_GFX_API_DECL sg_pipeline sg_alloc_pipeline(void)`
fn C.sg_alloc_pipeline() Pipeline

// alloc_pipeline is currently undocumented
pub fn alloc_pipeline() Pipeline {
	return C.sg_alloc_pipeline()
}

// C: `SOKOL_GFX_API_DECL sg_pass sg_alloc_pass(void)`
fn C.sg_alloc_pass() Pass

// alloc_pass is currently undocumented
pub fn alloc_pass() Pass {
	return C.sg_alloc_pass()
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_buffer(sg_buffer buf_id)`
fn C.sg_dealloc_buffer(buf_id Buffer)

// dealloc_buffer is currently undocumented
pub fn dealloc_buffer(buf_id Buffer) {
	C.sg_dealloc_buffer(buf_id)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_image(sg_image img_id)`
fn C.sg_dealloc_image(img_id Image)

// dealloc_image is currently undocumented
pub fn dealloc_image(img_id Image) {
	C.sg_dealloc_image(img_id)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_shader(sg_shader shd_id)`
fn C.sg_dealloc_shader(shd_id Shader)

// dealloc_shader is currently undocumented
pub fn dealloc_shader(shd_id Shader) {
	C.sg_dealloc_shader(shd_id)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_pipeline(sg_pipeline pip_id)`
fn C.sg_dealloc_pipeline(pip_id Pipeline)

// dealloc_pipeline is currently undocumented
pub fn dealloc_pipeline(pip_id Pipeline) {
	C.sg_dealloc_pipeline(pip_id)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_pass(sg_pass pass_id)`
fn C.sg_dealloc_pass(pass_id Pass)

// dealloc_pass is currently undocumented
pub fn dealloc_pass(pass_id Pass) {
	C.sg_dealloc_pass(pass_id)
}

// C: `SOKOL_GFX_API_DECL void sg_init_buffer(sg_buffer buf_id, const sg_buffer_desc* desc)`
fn C.sg_init_buffer(buf_id Buffer, const_desc &BufferDesc)

// init_buffer is currently undocumented
pub fn init_buffer(buf_id Buffer, const_desc &BufferDesc) {
	C.sg_init_buffer(buf_id, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_image(sg_image img_id, const sg_image_desc* desc)`
fn C.sg_init_image(img_id Image, const_desc &ImageDesc)

// init_image is currently undocumented
pub fn init_image(img_id Image, const_desc &ImageDesc) {
	C.sg_init_image(img_id, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_shader(sg_shader shd_id, const sg_shader_desc* desc)`
fn C.sg_init_shader(shd_id Shader, const_desc &ShaderDesc)

// init_shader is currently undocumented
pub fn init_shader(shd_id Shader, const_desc &ShaderDesc) {
	C.sg_init_shader(shd_id, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_pipeline(sg_pipeline pip_id, const sg_pipeline_desc* desc)`
fn C.sg_init_pipeline(pip_id Pipeline, const_desc &PipelineDesc)

// init_pipeline is currently undocumented
pub fn init_pipeline(pip_id Pipeline, const_desc &PipelineDesc) {
	C.sg_init_pipeline(pip_id, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_pass(sg_pass pass_id, const sg_pass_desc* desc)`
fn C.sg_init_pass(pass_id Pass, const_desc &PassDesc)

// init_pass is currently undocumented
pub fn init_pass(pass_id Pass, const_desc &PassDesc) {
	C.sg_init_pass(pass_id, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_buffer(sg_buffer buf_id)`
fn C.sg_uninit_buffer(buf_id Buffer)

// uninit_buffer is currently undocumented
pub fn uninit_buffer(buf_id Buffer) {
	C.sg_uninit_buffer(buf_id)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_image(sg_image img_id)`
fn C.sg_uninit_image(img_id Image)

// uninit_image is currently undocumented
pub fn uninit_image(img_id Image) {
	C.sg_uninit_image(img_id)
}

// C: `SOKOL_GFX_API_DECL sg_uninit_shader(sg_shader shd_id)`
fn C.sg_uninit_shader(shd_id Shader)

// uninit_shader is currently undocumented
pub fn uninit_shader(shd_id Shader) {
	C.sg_uninit_shader(shd_id)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_pipeline(sg_pipeline pip_id)`
fn C.sg_uninit_pipeline(pip_id Pipeline)

// uninit_pipeline is currently undocumented
pub fn uninit_pipeline(pip_id Pipeline) {
	C.sg_uninit_pipeline(pip_id)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_pass(sg_pass pass_id)`
fn C.sg_uninit_pass(pass_id Pass)

// uninit_pass is currently undocumented
pub fn uninit_pass(pass_id Pass) {
	C.sg_uninit_pass(pass_id)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_buffer(sg_buffer buf_id)`
fn C.sg_fail_buffer(buf_id Buffer)

// fail_buffer is currently undocumented
pub fn fail_buffer(buf_id Buffer) {
	C.sg_fail_buffer(buf_id)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_image(sg_image img_id)`
fn C.sg_fail_image(img_id Image)

// fail_image is currently undocumented
pub fn fail_image(img_id Image) {
	C.sg_fail_image(img_id)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_shader(sg_shader shd_id)`
fn C.sg_fail_shader(shd_id Shader)

// fail_shader is currently undocumented
pub fn fail_shader(shd_id Shader) {
	C.sg_fail_shader(shd_id)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_pipeline(sg_pipeline pip_id)`
fn C.sg_fail_pipeline(pip_id Pipeline)

// fail_pipeline is currently undocumented
pub fn fail_pipeline(pip_id Pipeline) {
	C.sg_fail_pipeline(pip_id)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_pass(sg_pass pass_id)`
fn C.sg_fail_pass(pass_id Pass)

// fail_pass is currently undocumented
pub fn fail_pass(pass_id Pass) {
	C.sg_fail_pass(pass_id)
}

// C: `SOKOL_GFX_API_DECL sg_context sg_setup_context(void)`
fn C.sg_setup_context() Context

// setup_context renderings contexts (optional)
pub fn setup_context() Context {
	return C.sg_setup_context()
}

// C: `SOKOL_GFX_API_DECL void sg_activate_context(sg_context ctx_id)`
fn C.sg_activate_context(ctx_id Context)

// activate_context is currently undocumented
pub fn activate_context(ctx_id Context) {
	C.sg_activate_context(ctx_id)
}

// C: `SOKOL_GFX_API_DECL void sg_discard_context(sg_context ctx_id)`
fn C.sg_discard_context(ctx_id Context)

// discard_context is currently undocumented
pub fn discard_context(ctx_id Context) {
	C.sg_discard_context(ctx_id)
}

// C: `SOKOL_GFX_API_DECL const void* sg_d3d11_device(void)`
fn C.sg_d3d11_device() voidptr

// d3d11_device d3d11:s return ID3D11Device
pub fn d3d11_device() voidptr {
	return C.sg_d3d11_device()
}

// C: `SOKOL_GFX_API_DECL const void* sg_mtl_device(void)`
fn C.sg_mtl_device() voidptr

// mtl_device metal:s return __bridge-casted MTLDevice
pub fn mtl_device() voidptr {
	return C.sg_mtl_device()
}

// C: `SOKOL_GFX_API_DECL const void* sg_mtl_render_command_encoder(void)`
fn C.sg_mtl_render_command_encoder() voidptr

// mtl_render_command_encoder metal:s return __bridge-casted MTLRenderCommandEncoder in current pass (or zero if outside pass)
pub fn mtl_render_command_encoder() voidptr {
	return C.sg_mtl_render_command_encoder()
}
